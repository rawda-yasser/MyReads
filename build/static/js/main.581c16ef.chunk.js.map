{"version":3,"sources":["BooksAPI.js","components/shelfOptions.js","components/BookItem.js","components/BookList.js","components/BooksPage.js","components/SearchBar.js","components/SearchResult.js","components/SearchPage.js","MyReads.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","credentials","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","ShelfOptions","state","updateShelf","event","_this","setState","target","value","props","console","log","this","react_default","a","createElement","className","onChange","disabled","React","Component","BookItem","bookThumbnail","imageLinks","undefined","thumbnail","style","width","height","backgroundImage","shelfOptions","handleChange","title","authors","BookList","updateBooks","updateAllBooks","getTitle","BooksAPI","_this2","map","key","components_BookItem","bookTitle","bookAuthors","imageURL","BooksPage","allBooks","currentlyReading","wantToRead","read","retrieveAll","components_BookList","react_router_dom","to","Search","onClick","handleClose","type","placeholder","SearchResult","searchedBooks","bookItem","SearchPage","getSearchResult","SearchBar","checkResultIsEmpty","components_SearchResult","HomePage","all","_currentlyReading","filter","_wantToRead","_read","qry","getArrayResult","addShelfToResult","all_books","_searchedBooks","adjusted_books","b","forEach","b1","obj","_arr","entries","_i","length","_ref3","slicedToArray","push","react_router","exact","path","element","components_BooksPage","SearchPage_SearchPage","BooksApp","MyReads","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.581c16ef.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token)\n  token = localStorage.token = Math.random()\n    .toString(36)\n    .substr(-8);\n\nconst headers = {\n  credentials: \"include\",\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","import React from \"react\";\n\nclass ShelfOptions extends React.Component {\n  state = { shelf: \"none\" };\n  componentDidMount() {\n    this.setState({ shelf: this.props.book.shelf });\n    // console.log(\"shelf option\", this.props.book.shelf);\n  }\n  updateShelf = (event) => {\n    // console.log(\"event.target.value\", event.target.value);\n    this.setState({ shelf: event.target.value }, () => {\n      this.props.updateShelf(this.props.book, this.state.shelf);\n      console.log(this.state);\n    });\n\n    // this.props.updateShelf(this.props.book, this.state.shelf);\n  };\n  render() {\n    return (\n      <div className=\"book-shelf-changer\">\n        <select onChange={this.updateShelf} value={this.state.shelf}>\n          <option value=\"move\" disabled>\n            Move to...\n          </option>\n          <option value=\"currentlyReading\">Currently Reading</option>\n          <option value=\"wantToRead\">Want to Read</option>\n          <option value=\"read\">Read</option>\n          <option value=\"none\">None</option>\n        </select>\n      </div>\n    );\n  }\n}\nexport default ShelfOptions;\n","import React from \"react\";\nimport ShelfOptions from \"./shelfOptions\";\nclass BookItem extends React.Component {\n  render() {\n    const defaultThumbnail =\n      \"https://dummyimage.com/400x600/000/fff.png&text=No+book+image+available\";\n    let bookThumbnail = this.props.book.imageLinks;\n    if (bookThumbnail === undefined) bookThumbnail = defaultThumbnail;\n    else bookThumbnail = bookThumbnail.thumbnail;\n    return (\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <div\n            className=\"book-cover\"\n            style={{\n              width: 128,\n              height: 193,\n              backgroundImage: `url(${bookThumbnail}})`,\n            }}\n          />\n          <ShelfOptions\n            book={this.props.book}\n            updateShelf={this.props.updateShelf}\n            handleChange={this.props.handleChange}\n          />\n        </div>\n        <div className=\"book-title\">{this.props.book.title}</div>\n        <div className=\"book-authors\">{this.props.book.authors}</div>\n      </div>\n    );\n  }\n}\nexport default BookItem;\n","import React from \"react\";\nimport BookItem from \"./BookItem\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nclass BookList extends React.Component {\n  updateBooks = () => {\n    this.props.updateAllBooks();\n  };\n  getTitle = () => {\n    if (this.props.shelf === \"currentlyReading\") return \"Currently Reading\";\n    if (this.props.shelf === \"read\") return \"Read\";\n    if (this.props.shelf === \"wantToRead\") return \"Want To Read\";\n  };\n  updateShelf = (book, shelf) => {\n    BooksAPI.update(book, shelf).then((res) => {\n      this.updateBooks();\n    });\n  };\n  render() {\n    const title = this.getTitle();\n    return (\n      <div className=\"list-books-content\">\n        <div>\n          <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{title}</h2>\n            <div className=\"bookshelf-books\">\n              <ol className=\"books-grid\">\n                {this.props.books.map((book) => (\n                  <li key={book.id}>\n                    <BookItem\n                      book={book}\n                      bookTitle={book.title}\n                      bookAuthors={book.authors}\n                      imageURL={book.imageLinks.thumbnail}\n                      updateShelf={this.updateShelf}\n                    />\n                  </li>\n                ))}\n              </ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default BookList;\n","import React from \"react\";\nimport BookList from \"./BookList\";\n\nimport { Link } from \"react-router-dom\";\nclass BooksPage extends React.Component {\n  state = { allBooks: [], currentlyReading: [], wantToRead: [], read: [] };\n  updateAllBooks = () => {\n    this.props.retrieveAll();\n  };\n  componentDidMount() {\n    this.props.retrieveAll();\n  }\nrender() {\n    return (\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n        <BookList\n          shelf=\"currentlyReading\"\n          updateAllBooks={this.updateAllBooks}\n          books={this.props.currentlyReading}\n        />\n        <BookList\n          shelf=\"wantToRead\"\n          updateAllBooks={this.updateAllBooks}\n          books={this.props.wantToRead}\n        />\n        <BookList\n          shelf=\"read\"\n          updateAllBooks={this.updateAllBooks}\n          books={this.props.read}\n        />\n        <div className=\"open-search\">\n          <Link to=\"/search\">\n            <button>Add a book</button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\nexport default BooksPage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nclass Search extends React.Component {\n  handleChange = (event) => {\n    this.props.handleChange(event.target.value);\n  };\n\n  render() {\n    return (\n      <div className=\"search-books-bar\">\n        <Link to=\"/\">\n          <button className=\"close-search\" onClick={this.props.handleClose}>\n            Close\n          </button>\n        </Link>\n\n        <div className=\"search-books-input-wrapper\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by title or author\"\n            value={this.props.query}\n            onChange={this.handleChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\nimport BookItem from \"./BookItem\";\nclass SearchResult extends React.Component {\n  render() {\n    console.log(\"res\", this.props.searchedBooks);\n    return (\n      <div className=\"search-books-results\">\n        <ol className=\"books-grid\">\n          {this.props.searchedBooks.map((bookItem) => (\n            <li key={bookItem.id}>\n              <BookItem\n                book={bookItem}\n                updateShelf={this.props.updateShelf}\n                handleChange={this.props.handleChange}\n              />\n            </li>\n          ))}\n        </ol>\n      </div>\n    );\n  }\n}\nexport default SearchResult;\n","import React from \"react\";\nimport * as BooksAPI from \"../BooksAPI\";\nimport SearchBar from \"./SearchBar\";\nimport SearchResult from \"./SearchResult\";\nexport default class SearchPage extends React.Component {\n  // state = { query: \"\", result: [], allData: [] };\n\n  componentDidMount() {\n    this.props.getSearchResult(this.props.query);\n  }\n\n  // getSearchResult = (qry) => {\n  //   BooksAPI.search(qry).then((res) => {\n  //     console.log(typeof res);\n  //     res = this.getArrayResult(res);\n  //     console.log(\"arr\", res);\n  //     setTimeout(() => {\n  //       this.setState({\n  //         result: res,\n  //       });\n  //     }, 1000);\n  //   });\n  // };\n\n  // addShelfToResult = (old_res) => {\n  //   let new_res = [];\n  //   const all_books = this.state.allData;\n  //   console.log(\"add shelf to res\", all_books, old_res);\n  //   for (const book of all_books) {\n  //     for (const res_book of old_res) {\n  //       if (book.id === res_book.id) {\n  //         let new_book = res_book;\n  //         new_book.shelf = book.shelf;\n  //         new_res.push(new_book);\n  //       }\n  //     }\n  //   }\n  //   // this.setState({ result: new_res });\n  //   return new_res;\n  // };\n  // getAllData = () => {\n  //   BooksAPI.getAll().then((res) => {\n  //     console.log(\"all\", res);\n  //     this.setState({ allData: res });\n  //   });\n  // };\n\n  // updateBooks = () => {\n  //   this.props.getSearchResult(this.state.query);\n  // };\n  // updateShelf = (book, shelf) => {\n  //   BooksAPI.update(book, shelf).then((res) => {\n  //     this.updateBooks();\n  //   });\n  // };\n\n  render() {\n    return (\n      <div className=\"search-books\">\n        <SearchBar\n          query={this.props.query}\n          handleChange={this.props.handleChange}\n        />\n        {!this.props.checkResultIsEmpty() ? (\n          <SearchResult\n            searchedBooks={this.props.searchedBooks}\n            updateShelf={this.props.updateShelf}\n            handleChange={this.props.handleChange}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport BooksPage from \"./components/BooksPage\";\nimport SearchPage from \"./components/SearchPage\";\nimport \"./App.css\";\nimport * as BooksAPI from \"./BooksAPI\";\n\nclass HomePage extends React.Component {\n  state = {\n    allBooks: [],\n    currentlyReading: [],\n    wantToRead: [],\n    read: [],\n    searchedBooks: [],\n    query: \"\",\n  };\n  componentDidMount() {\n    this.retrieveAll();\n  }\n  retrieveAll = () => {\n    BooksAPI.getAll().then((all) => {\n      const _currentlyReading = all.filter(\n        (book) => book.shelf === \"currentlyReading\"\n      );\n      const _wantToRead = all.filter((book) => book.shelf === \"wantToRead\");\n      const _read = all.filter((book) => book.shelf === \"read\");\n      this.setState({\n        allBooks: all,\n        currentlyReading: _currentlyReading,\n        wantToRead: _wantToRead,\n        read: _read,\n      });\n    });\n  };\n  getSearchResult = (qry) => {\n    BooksAPI.search(qry).then((res) => {\n      res = this.getArrayResult(res);\n      this.addShelfToResult(res);\n    });\n  };\n  handleChange = (qry) => {\n    this.setState({ query: qry });\n    this.getSearchResult(qry);\n  };\n  addShelfToResult = (res) => { // res is an array\n    const all_books = this.state.allBooks;\n    const _searchedBooks = res;\n    if (_searchedBooks === undefined) {\n      this.setState({ searchedBooks: [] });\n    } else {\n      let adjusted_books = _searchedBooks.map((b) => {\n        all_books.forEach((b1) => {\n          if (b.id === b1.id) {\n            b.shelf = b1.shelf;\n          }\n        });\n        return b;\n      });\n      this.setState({ searchedBooks: adjusted_books });\n    }\n  };\n  // Transform result object to array\n  getArrayResult = (obj) => {\n    let res = [];\n    if (obj === undefined) return [];\n    for (const [, value] of Object.entries(obj)) {\n      res.push(value);\n    }\n    return res;\n  };\n  checkResultIsEmpty = () => {\n    const res = this.state.searchedBooks;\n    return res === null || typeof res === undefined || res[0] === \"empty query\";\n  };\n  updateShelf = (book, shelf) => {\n    BooksAPI.update(book, shelf).then((res) => {\n      this.updateBooks();\n    });\n  };\n  updateBooks = () => {\n    this.getSearchResult(this.state.query);\n  };\n  render() {\n    return (\n      <BrowserRouter>\n        <Routes>\n          <Route\n            exact\n            path=\"/\"\n            element={\n              <BooksPage\n                currentlyReading={this.state.currentlyReading}\n                read={this.state.read}\n                wantToRead={this.state.wantToRead}\n                retrieveAll={this.retrieveAll}\n              />\n            }\n          />\n          <Route\n            exact\n            path=\"/search\"\n            element={\n              <SearchPage\n                searchedBooks={this.state.searchedBooks}\n                getSearchResult={this.getSearchResult}\n                query={this.query}\n                handleChange={this.handleChange}\n                checkResultIsEmpty={this.checkResultIsEmpty}\n                updateShelf={this.updateShelf}\n              />\n            }\n          />\n        </Routes>\n      </BrowserRouter>\n    );\n  }\n}\nexport default HomePage;\n","import React from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\n\nimport MyReads from \"./MyReads\";\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    books: [],\n  };\n\n  componentDidMount() {\n    BooksAPI.getAll().then((books) => {\n      this.setState({ books });\n    });\n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <MyReads />\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}